# :::::::::::::::::::
# ELDAmwl
# :::::::::::::::::::
default:

# :::::::::::::::::::
# Rayleigh fit
# :::::::::::::::::::
 # tested widths of the fit window in km
 # WINDOW_WIDTHS : [1.00, 1.25, 1.5, 2.0, 0.75, 3.0, 4.0, 0.50]
  WINDOW_WIDTHS : [1.00, 2.0, 0.50]

# :::::::::::::::::::
# mwl output file
# :::::::::::::::::::
  FILE_FORMAT_VERSION : 1.0

# :::::::::::::::::::
# testing
# :::::::::::::::::::
#  FIXTURES :
#    - FindBscCalibrWindowAsInELDA
#    - FindBscCalibrWindowAsInELDA.find_calibration_window

# :::::::::::::::::::
# Parallel processing
# :::::::::::::::::::
  NUM_CPU : 4
  PARALLEL : False

# :::::::::::::::::::
# Directories
# :::::::::::::::::::
  SIGNAL_PATH : 'data/ELPP_files'
  PRODUCT_PATH : 'data/ELDAmwl_files'
  TEMP_PATH : ''
  PLUGINS_DIR : ''
  LOG_PATH : 'data/eldamwl_logs'
  SAV_GOLAY_FILE : 'data/sg_params.pickle'

# :::::::::::::::::::
# database connection
# :::::::::::::::::::
#  DB_SERVER : ''
#  DB_USER : ''
#  DB_PASS : ''
#  DB_DB : ''
# You have to supply a .secrets.yaml file beside this file with the database access secrets shown above!

# :::::::::::::::::::
# Logging
# :::::::::::::::::::

  # The logfiles
  # general log level
  log_level : DEBUG
  # The desired log_level for console output
  log_level_console : DEBUG
  # The desired log_level for the logfile
  log_level_file : DEBUG
  # Colors for the log console output (Options see color_log-package)
  log_colors : {
      'DEBUG': 'cyan',
      'INFO': 'green',
      'WARNING': 'yellow',
      'ERROR': 'red',
      'CRITICAL': 'red,bg_white',
  }

  WRITE_EXTENDED_OUTPUT : True
  APPEND_LOG_FILE : False

# :::::::::::::::::::
# if there are errors in configuration of mwl product or its individual products
# if IGNORE_CONFIGURATION_ERRORS == True -> an exception is raised and ELDAmwl is stopped
# if IGNORE_CONFIGURATION_ERRORS == False -> the wrongly configured  product is not retrieved, but everything else is continued
  IGNORE_CONFIGURATION_ERRORS : False

# :::::::::::::::::::
# single-wavelength quality control
#  (flag values are defined in utils.constants.py)
# :::::::::::::::::::
  # screening of negative values
  # values below 0 - data - error * NEG_VALUES_ERR_FACTOR are flagged
  NEG_VALUES_ERR_FACTOR : 2

  # if the percentage (in number) of negative points is larger
  # than MAX_ALLOWED_PERCENTAGE_OF_NEG_DATA -> flag whole profile
  MAX_ALLOWED_PERCENTAGE_OF_NEG_DATA : {
      0: 0.25,  # RBSC
      3 : 0.25,  # EBSC
  }

  # screening for too large errors
  # values with (error > MAX_ALLOWED_REL_ERROR) and (error > MAX_ALLOWED_ABS_ERROR) are flagged
  MAX_ALLOWED_REL_ERROR : {
      0 : 0.2,  # RBSC
      3 : 0.2,  # EBSC
      1 : 0.5,  # EXT
      2 : 2,    # LR
      15: 0.1,  # VLDR
      16: 0.1,  # PLDR
      13: 0.2,  # AE
  }
  MAX_ALLOWED_ABS_ERROR : {
      0 : 1E-7, # RBSC
      3 : 1E-7, # EBSC
      1 : 1E-6, # EXT
      2 : 100,  # LR
      15: 0.1,  # VLDR
      16: 0.1,  # PLDR
      13: 1,    # AE
  }

  # screening for layers with no aerosol
  # values with corresponding backscatter ratio (at 532nm) < MIN_BSC_RATIO are flagged
  MIN_BSC_RATIO : {
      3 : 1.1,  # EBSC, just for testing
      2 : 1.1,  # LR
  }

  # screening for profiles with unrealistic large integral values
  MAX_INTEGRAL : {
      0 : 0.02,  # RBSC
      3 : 0.02,  # EBSC
      1 : 1,  # EXT
  }

  # data points which are outside physically meaningful range.
  # if no threshold can be defined, use the value of variable INVALID
  VALID_DATA_RANGE : {
      2 : [0, 150],  # LR
      13: [-1, 4],  # AE
      15: [-999, 0.5],  # VLDR
      16: [0, 0.5],  # PLDR
  }
  INVALID : -999

  # if the percentage (in number) of out-of-range data points is larger
  # than MAX_ALLOWED_PERCENTAGE_OF_OUT_OF_RANGE_DATA -> flag whole profile
  MAX_ALLOWED_PERCENTAGE_OF_OUT_OF_RANGE_DATA : {
      2 : 0.3,  # LR
      13: 0.3,
      15: 0.3,
      16: 0.3,
  }

  # if there are gaps in the profile (due to previous qc steps), how many adjacent points are considered to be enough?
  # in order to avoid single data points. The comparison is made with respect to the current vertical resolution
  # of the profile, but there need to be a minimum threshold, too.
  # if one or some adjacent data points do not cover a height range more than MIN_LAYER_DEPTH,
  # they are considered "single points" and flagged accordingly
  MIN_LAYER_DEPTH : 100  # in m

  # data points with critical quality flags are filled with nan values
  CRITICAL_FLAGS : [1,  # NEG_DATA
                    2,  # BELOW_OVL
                    4,  # ABOVE_MAX_ALT
                    # HAS_CLOUD = 8
                    # ABOVE_KLETT_REF = 16
                    32,  # VALUE_OUTSIDE_VALID_RANGE
                    64,  # BELOW_MIN_BSCR
                    128,  # CALC_WINDOW_OUTSIDE_PROFILE
                    256,  # UNCERTAINTY_TOO_LARGE
                    1024,  # SINGLE_POINT
  ]

testing:
  SIGNAL_PATH : 'data/ELPP_files'
  LOG_PATH : 'data'

